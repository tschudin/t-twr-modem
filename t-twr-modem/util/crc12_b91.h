// crc12_b91.h

// 12-bit crc 0xb91, following up on a comment in
// https://blog.martincowen.me.uk/you-are-probably-using-a-sub-optimal-crc.html
//   data word 1024 bits, HD=4
//   0xB91 = binary 1011 1001 0001 = x^12 + x^10 + x^9 + x^8 + x^5 + x + 1.

/** based on C code generated by pycrc (see https://pycrc.org/)
 *
 * using the configuration:
 *  - Width         = 12
 *  - Poly          = 0xb91
 *  - XorIn         = 0x000
 *  - ReflectIn     = False
 *  - XorOut        = 0x000
 *  - ReflectOut    = False
 *  - Algorithm     = bit-by-bit
 */

uint16_t crc12_b91(const uint8_t *data, size_t data_len)
{
    uint16_t crc = 0;
    // update
    while (data_len--) {
        uint8_t c = *data++;
        for (int i = 0; i < 8; i++) {
            bool bit = crc & 0x800;
            crc = (crc << 1) | ((c >> (7 - i)) & 0x01);
            if (bit)
                crc ^= 0xb91;
        }
        crc &= 0xfff;
    }
    // finalize
    for (int i = 0; i < 12; i++) {
        bool bit = crc & 0x800;
        crc <<= 1;
        if (bit)
            crc ^= 0xb91;
    }
    return crc & 0xfff;
}
